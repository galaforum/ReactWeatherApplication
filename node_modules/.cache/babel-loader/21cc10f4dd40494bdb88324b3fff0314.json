{"ast":null,"code":"var _jsxFileName = \"/Users/forum/Documents/GitHub/ReactWeatherApplication/src/weathergridList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport tileData from './tileData';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      flex: 1,\n      borderWidth: 1,\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      overflow: 'hidden',\n      height: 80,\n      backgroundColor: '#EEA900' //theme.palette.background.paper,\n\n    },\n    gridList: {\n      flexWrap: 'nowrap',\n      // height: 100,\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: 'translateZ(0)'\n    },\n    title: {\n      color: theme.palette.primary.light\n    },\n    tableDayWeather: {\n      textAlign: 'center',\n      color: 'white'\n    },\n    svgStyle: {\n      fill: 'white' // titleBar: {\n      //     background:\n      //         'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n      // },\n\n    }\n  };\n};\n\nfunction SingleLineGridList(props) {\n  var classes = props.classes;\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(GridList, {\n    className: classes.gridList,\n    cols: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, tileData.map(function (tile) {\n    return React.createElement(GridListTile, {\n      key: tile.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.tableDayWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, tile.time, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"svg\", {\n      className: classes.svgStyle,\n      xmlns: \"http://www.w3.org/2000/svg\",\n      width: \"24\",\n      height: \"24\",\n      viewBox: \"0 0 24 24\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"path\", {\n      fill: \"none\",\n      d: \"M0 0h24v24H0V0z\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(\"path\", {\n      d: tile.dValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), tile.temperature, React.createElement(\"sup\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"o\"), \"F\"));\n  })));\n}\n\nSingleLineGridList.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(SingleLineGridList);","map":{"version":3,"sources":["/Users/forum/Documents/GitHub/ReactWeatherApplication/src/weathergridList.js"],"names":["React","PropTypes","withStyles","GridList","GridListTile","GridListTileBar","IconButton","StarBorderIcon","tileData","styles","theme","root","flex","borderWidth","flexDirection","justifyContent","overflow","height","backgroundColor","gridList","flexWrap","transform","title","color","palette","primary","light","tableDayWeather","textAlign","svgStyle","fill","SingleLineGridList","props","classes","map","tile","key","time","dValue","temperature","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport tileData from './tileData';\n\nconst styles = theme => ({\n    root: {\n        flex: 1,\n        borderWidth: 1,\n        flexDirection: 'row',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        height:80,\n        backgroundColor: '#EEA900'//theme.palette.background.paper,\n    },\n    gridList: {\n        flexWrap: 'nowrap',\n        // height: 100,\n        // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n        transform: 'translateZ(0)',\n    },\n    title: {\n        color: theme.palette.primary.light,\n    },\n    tableDayWeather:{\n        textAlign:'center',\n        color:'white'\n    },\n    svgStyle: {\n        fill:'white'\n    }\n    // titleBar: {\n    //     background:\n    //         'linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    // },\n});\n\nfunction SingleLineGridList(props) {\n    const { classes } = props;\n\n    return (\n        <div className={classes.root}>\n            <GridList className={classes.gridList} cols={10}>\n                {tileData.map(tile => (\n                    <GridListTile key={tile.key}>\n                        <div className={classes.tableDayWeather}>\n                            {tile.time}\n                            <br/>\n                            {/*<svg height=\"448pt\" viewBox=\"-12 0 448 448.04455\" width=\"448pt\" xmlns=\"http://www.w3.org/2000/svg\">             <path d=\"m224.023438 448.03125c85.714843.902344 164.011718-48.488281 200.117187-126.230469-22.722656 9.914063-47.332031 14.769531-72.117187 14.230469-97.15625-.109375-175.890626-78.84375-176-176 .972656-65.71875 37.234374-125.832031 94.910156-157.351562-15.554688-1.980469-31.230469-2.867188-46.910156-2.648438-123.714844 0-224.0000005 100.289062-224.0000005 224 0 123.714844 100.2851565 224 224.0000005 224zm0 0\"/></svg>*/}\n                            <svg className={classes.svgStyle} xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path fill=\"none\" d=\"M0 0h24v24H0V0z\"/><path d={tile.dValue}/></svg>\n                            <br/>\n                            {tile.temperature}<sup>o</sup>F\n                        </div>\n                    </GridListTile>\n                ))}\n            </GridList>\n        </div>\n    );\n}\n\nSingleLineGridList.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(SingleLineGridList);"]},"metadata":{},"sourceType":"module"}